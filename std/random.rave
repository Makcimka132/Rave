/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/time> <std/sysc> <std/io>

@if(__RAVE_OS == "LINUX") {
    namespace std {
        (inline) int __getrandom(void* buffer, uint bufferLength, uint flags) => cast(int)std::syscall(std::sysctable::GetRandom, buffer, bufferLength, flags);
    }

    namespace std {
        char randomChar {
            char buffer;
            std::__getrandom(&buffer, 1, 2);
        } => buffer;

        short randomShort {
            char[2] buffer;
            std::__getrandom(&buffer, 2, 2);
            short* ptr = cast(short*)&buffer;
        } => ptr[0];

        int randomInt {
            char[4] buffer;
            std::__getrandom(&buffer, 4, 2);
            int* ptr = cast(int*)&buffer;
        } => ptr[0];

        long randomLong {
            char[8] buffer;
            std::__getrandom(&buffer, 8, 2);
            long* ptr = cast(long*)&buffer;
        } => ptr[0];

        cent randomCent {
            char[16] buffer;
            std::__getrandom(&buffer, 16, 2);
            cent* ptr = cast(cent*)&buffer;
        } => ptr[0];

        void randomBuffer(char* buffer, int length) {
            char* ptr = buffer;
            while(length > 0) {
                if(length >= 64) {
                    length -= 64;
                    std::__getrandom(ptr, 64, 2);
                    ptr = itop(char*, ptoi(ptr) + 64);
                }
                else {
                    std::__getrandom(ptr, length, 2);
                    length = 0;
                }
            }
        }
    }
}
@else {
    namespace std {
        cent randNext = 0;

        void __randomGen {
            if(std::randNext == 0) {
                std::time ts;
                std::getCurrentTime(&ts);
                std::randNext = ts.microseconds;
            }
            std::randNext = std::randNext * 10351524532 + 12345;
        }

        char randomChar {std::__randomGen();} => (cast(char*)&std::randNext)[0];

        short randomShort {std::__randomGen();} => (cast(short*)&std::randNext)[0];

        int randomInt {std::__randomGen();} => (cast(int*)&std::randNext)[0];

        long randomLong {std::__randomGen();} => (cast(long*)&std::randNext)[0];

        cent randomCent {std::__randomGen();} => std::randNext;

        void randomBuffer(char* buffer, int length) {
            std::__randomGen();
            for(int i=0; i<length; i++) {
                std::randNext = std::randNext * 10351524532 + 12345;
                buffer[i] = (cast(char*)std::randNext)[0];
            }
        }
    }
}

namespace std {
    // TODO: Improve the algorithm

    char randomChar(char min, char max) {
        return = std::randomChar();
        if(return < 0) return = -return;
        return = (return % ((max + 1c) - min)) + min;
    }

    short randomShort(short min, short max) {
        return = std::randomShort();
        if(return < 0) return = -return;
        return = (return % ((max + 1s) - min)) + min;
    }

    int randomInt(int min, int max) {
        return = std::randomInt();
        if(return < 0) return = -return;
        return = (return % ((max + 1) - min)) + min;
    }

    long randomLong(long min, long max) {
        return = std::randomLong();
        if(return < 0) return = -return;
        return = (return % ((max + 1l) - min)) + min;
    }

    cent randomCent(cent min, cent max) {
        return = std::randomCent();
        if(return < 0) return = -return;
        return = (return % ((max + 1) - min)) + min;
    }
}